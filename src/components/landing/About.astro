---
import Stats from "./Stats.astro";
---

<section>
  <div class="lg:p-20 p-4 relative z-40">
    <div class="h-[20vh]"></div>
    <div class="max-w-[90vw] w-fit" id="mid-left">
      <h2 class="text-4xl border border-zinc-800 w-min">Haiii</h2>
      <h1 class="text-5xl">
        I'm <span
          class="text-transparent bg-clip-text bg-gradient-to-b from-teal-300 via-teal-300 to-slate-200"
          >Tnixc</span
        >
      </h1>
      <h2 class="max-w-full whitespace-normal text-3xl h-12 w-[30ch]">
        Just a 15y/o <span id="text-rpd-text"></span><span
          id="underscore"
          class="text-blue-500">_</span
        >
      </h2>
      <h2 class="text-2xl pt-7 whitespace-normal">
        he/him ✦ EST(UTC-5) ✦ 15 ✦ 🇭🇰🇨🇦
      </h2>
      <div class="p-5">
        <button
          id="open"
          class="p-3 bg-zinc-900 border-2 hover:scale-95 transition-all"
          >⍈ More About Me :3</button
        >
      </div>
    </div>
    <Stats />
  </div>
  <dialog
    id="more"
    class="lg:p-10 p-4 rounded-xl bg-zinc-800 text-zinc-400 w-[60rem] max-w-[90vw]"
  >
    <form method="dialog">
      <h1 class="text-2xl pb-10 text-zinc-500">More about me</h1>
      <p>
        1. Thanks for opening this dialog!
        <br />
        <br />
        <span class="text-white"
          >I'm a 15 year old high school student from Hong Kong living in
          Canada.</span
        >
        I enjoy video games, coding, reading books and webcomics, watching anime,
        listening to lots of jpop, touhou songs, vocaloids and all that, and doing
        2D and 3D art. I started webdev around 2022, but honestly time has been blur
        since 2020 so I'm not sure. I also like trains and bikes(a huge fan of dutch
        urban design), public transit, typography, and open source. I also like chilling
        in IKEA and hiking :3
        <br />
        <br />

        I also enjoy games like minecraft and a lot of rhythm games like osu!,
        pjsk, and beat saber. I also like BG3, City Skylines 2, Cyberpunk, poly
        bridge, ultrakill, besiege, and celeste.
        <br />
        <br />
      </p>
      <div class="flex gap-2 items-center max-w-full overflow-hidden">
        <button
          id="close"
          class="p-2 border-2 hover:scale-95 transition-all text-red-400"
          >✖ Close dialog</button
        >
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
        <span>←</span>
      </div>
    </form>
  </dialog>
</section>
<script>
  document.getElementById("open").addEventListener("click", () => {
    //@ts-expect-error
    document.getElementById("more").showModal();
  });
  document.getElementById("close").addEventListener("close", () => {
    //@ts-expect-error
    document.getElementById("more").close();
  });
  const texts: string[] = [
    "webdev",
    "anime enjoyer",
    "webnovel reader",
    "aspiring 2D Artist",
    "minecraft enjoyer",
    "rhythm game player",
    "aspiring 3D artist",
    "highschool student",
    "webtoon reader",
  ];
  let currentIndex = 0;
  let typedText = "";
  let showUnderscore = false;
  const textElement = document.getElementById("text-rpd-text");

  const typeAndCycleText = async () => {
    while (true) {
      await typeText(texts[currentIndex]);
      await sleep(2000);
      await backspace();
      currentIndex = (currentIndex + 1) % texts.length;
    }
  };

  const typeText = (text: string) => {
    return new Promise<void>((resolve) => {
      let charIndex = 0;
      const delay = 100;

      const typingInterval = setInterval(() => {
        if (charIndex < text.length) {
          typedText += text[charIndex];
          charIndex++;
        } else {
          clearInterval(typingInterval);
          resolve();
        }
      }, delay);
    });
  };

  const backspace = () => {
    return new Promise<void>((resolve) => {
      const delay = 50;
      const textToType = typedText;
      let charIndex = textToType.length;

      const backspaceInterval = setInterval(() => {
        if (charIndex > 0) {
          typedText = textToType.substring(0, charIndex - 1);
          charIndex--;
        } else {
          clearInterval(backspaceInterval);
          resolve();
        }
      }, delay);
    });
  };

  const sleep = (ms: number) => {
    return new Promise<void>((resolve) => {
      setTimeout(resolve, ms);
    });
  };
  typeAndCycleText();
  setInterval(() => {
    showUnderscore = !showUnderscore;
    document.getElementById("underscore").style.visibility = showUnderscore
      ? "visible"
      : "hidden";
  }, 500);
  setInterval(() => {
    textElement.innerText = typedText;
  }, 100);
</script>
<style>
  dialog {
    animation: fade-up 0.5s ease;
  }
  @keyframes fade-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
  }
  #mid-left {
    transform: perspective(1000px) rotateY(-4deg) rotateX(0deg)
      translateX(-20px);
  }
  #underscore {
    text-shadow: 0 0 5px #3c6ac4;
  }
</style>
